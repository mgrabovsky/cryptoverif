(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and David Cadé                       *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2015           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributors: Bruno Blanchet, Bruno.Blanchet@inria.fr
                  David Cadé

This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* Signed Diffie-Hellman protocol
   This file proves a forward secrecy property. *)

param N, N2.

type host [bounded].
type keyseed [large,fixed].
type seed [fixed].
type pkey [bounded].
type skey [bounded].
type blocksize [bounded].
type signature [bounded].

type Z [large,bounded].
type G [large,bounded].
type D [fixed].

proof {
success; (* prove query x:G, y:G, k:D, k':D; event endB(A, B, x, y, k) && endA(A, B, x, y, k') ==> k = k'. *)
crypto uf_cma_corrupt(sign) rkA;
success; (* prove query x:G, y:G, k:D; event inj:endB(A, B, x, y, k) ==> inj:endA(A, B, x, y, k) || evAcorrupted. *)
crypto uf_cma_corrupt(sign) rkB;
success; (* prove query x:G, y:G, k:D; event inj:endA(A, B, x, y, k) ==> inj:beginB(A, B, x, y) || evBcorrupted. *)
crypto rom(h);
crypto cdh(exp) a b;
simplify;
success
}

(* the CDH assumption *) 

proba pCDH.

expand CDH(G, Z, g, exp, mult, pCDH).

(* h in the random oracle model *)

type hashkey [fixed].

expand ROM_hash(hashkey, G, D, h).

param nH [noninteractive].
channel hc1, hc2.
let processH = ! nH in(hc1, x: G); out(hc2, h(hk,x)).

(* signatures *)

fun concatA(host, host, G, G):blocksize [compos].
fun concatB(host, host, G, G):blocksize [compos].
forall x:host, y:host, z:G, t:G, x':host, y':host, z':G, t':G;
   concatA(x,y,z,t) <> concatB(x',y',z',t').
    
proba Psign.
proba Psigncoll.

expand UF_CMA_signature(keyseed, pkey, skey, blocksize, signature, seed, skgen, pkgen, sign, check, Psign, Psigncoll).

const A,B:host.

(* query *)
query secret kA_secret.

event endA(host, host, G, G, D).
event beginB(host, host, G, G).
event endB(host, host, G, G, D).
event evAcorrupted.
event evBcorrupted.

query x:G, y:G, k:D; event inj:endA(A, B, x, y, k) ==> inj:beginB(A, B, x, y) || evBcorrupted.
query x:G, y:G, k:D; event inj:endB(A, B, x, y, k) ==> inj:endA(A, B, x, y, k) || evAcorrupted.
query x:G, y:G, k:D, k':D; event endB(A, B, x, y, k) && endA(A, B, x, y, k') ==> k = k'.

channel start, cstart, cA1, cA2, cA3, cA4, cA5, cA6, cA7, cA8, cB1, cB2, cB3, cB4, cB5, cB6, cH, cHret, cK, cCorruptA, cCorruptB.

let processA = 
  in(cA1, (hostB: host));
  new a:Z;
  let Aga:G = exp(g,a) in
  out(cA2, (A, hostB, Aga));
  in(cA3, (=A, =hostB, Agb:G, s:signature));
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostB) then
  let pkhostB = Rkey[j2] in
  if check(concatB(A, hostB, Aga, Agb), pkhostB, s) then
  new r2: seed;
  let sA = sign(concatA(A, hostB, Aga, Agb), skA, r2) in
  let gab = exp(Agb, a) in
  let kA: D = h(hk, gab) in 
  event endA(A, hostB, Aga, Agb, kA);
  out(cA4, sA);
  (* OK *)
  in(cA5, ());
  if hostB = B then 
  (if defined(Acorrupted) then out(cA6, kA) else
   if defined(Bcorrupted) then out(cA6, kA) else 
   let kA_secret:D = kA)
  else
   out(cA6, kA).

let corruptA =
  in(cCorruptA, ()); 
  let Acorrupted:bool = true in
  event evAcorrupted;
  out(cCorruptA, skA).

let processB =
  in(cB1, (hostA:host, =B, Bga:G));
  new b:Z;
  let Bgb = exp(g,b) in
  new r1:seed;
  event beginB(hostA, B, Bga, Bgb);
  out(cB2, (hostA, B, Bgb, sign(concatB(hostA, B, Bga, Bgb), skB, r1)));
  in(cB3, s:signature);
  find j2 <= N2 suchthat defined(Khost[j2],Rkey[j2]) && (Khost[j2] = hostA) then
  let pkhostA = Rkey[j2] in
  if check(concatA(hostA, B, Bga, Bgb), pkhostA, s) then
  let gab = exp(Bga, b) in
  let kB = h(hk, gab) in
  event endB(hostA, B, Bga, Bgb, kB);
  (* OK *)
  if hostA = A then
    (find j <= N suchthat defined(hostB[j], Aga[j], Agb[j], kA[j]) &&
         hostB[j] = B && Aga[j] = Bga && Agb[j] = Bgb then 
       (* Here, there is a A partner of this instance of B;
          the secrecy of the key is proved at A *) 
       yield 
     else
       (* There is no A partner of this B, we can leak the key.
          Note that this can never happen when A is not corrupted 
	  by the correspondence. So we could in fact always leak kB here
	  without testing for the corruption. 
       if defined(Acorrupted) then out(cB4, kB) else
       if defined(Bcorrupted) then *) out(cB4, kB))
  else
    out(cB4, kB).

let corruptB =
  in(cCorruptB, ()); 
  let Bcorrupted:bool = true in
  event evBcorrupted;
  out(cCorruptB, skB).

let processK =
  !N2
  in(cK, (Khost: host, Kkey: pkey));
  let Rkey:pkey = 
		if Khost = B then pkB else
		if Khost = A then pkA else
		Kkey.

process
	in(start, ());
	new hk: hashkey;
	new rkA : keyseed;
	let skA = skgen(rkA) in
	let pkA = pkgen(rkA) in
	new rkB : keyseed;
	let skB = skgen(rkB) in
	let pkB = pkgen(rkB) in
	out(cstart, (pkA, pkB));
	((!N processA) | (!N processB) | processH | processK | corruptA | corruptB)

(* EXPECTED
All queries proved.
2.380s (user 2.316s + system 0.064s), max rss 169936K
END *)
