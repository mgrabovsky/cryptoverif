# 47 "lexer.mll"
 
open Parsing_helper
open Parser

let create_hashtable size init =
  let tbl = Hashtbl.create size in
  List.iter (fun (key,data) -> Hashtbl.add tbl key data) init;
  tbl

let keyword_table =
  create_hashtable 11
[ "new", NEW;
  "out", OUT;
  "in", IN;
  "if", IF;
  "then", THEN;
  "else", ELSE;
  "find", FIND;
  "orfind", ORFIND;
  "suchthat", SUCHTHAT;
  "fun", FUN;
  "param", PARAM;
  "forall", FORALL;
  "equation", EQUATION;
  "proba", PROBA;
  "type", TYPE;
  "equiv", EQUIV;
  "process", PROCESS;
  "let", LET;
  "query", QUERY;
  "secret", SECRET;
  "secret1", SECRET1;
  "const", CONST;
  "channel", CHANNEL;
  "set", SET;
  "defined", DEFINED;
  "collision", COLLISION;
  "event", EVENT;
  "time", TIME;
  "yield", YIELD;
  "event_abort", EVENT_ABORT;
  "otheruses", OTHERUSES;
  "maxlength", MAXLENGTH;
  "length", LENGTH;
  "max", MAX;
  "eps_find", EPSFIND;
  "eps_rand", EPSRAND;
  "Pcoll1rand", PCOLL1RAND;
  "Pcoll2rand", PCOLL2RAND;
  "newChannel", NEWCHANNEL;
  "inj", INJ;
  "define", DEFINE;
  "expand", EXPAND;
  "proof", PROOF;
  "implementation", IMPLEMENTATION;
  "get", GET;
  "insert", INSERT;
  "table", TABLE;
  "letfun", LETFUN
]


# 65 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\217\255\218\255\219\255\222\255\224\255\225\255\226\255\
    \001\000\228\255\232\255\001\000\031\000\034\000\238\255\065\000\
    \240\255\003\000\242\255\243\255\244\255\245\255\067\000\248\255\
    \087\000\084\000\252\255\103\000\005\000\001\000\255\255\178\000\
    \188\000\249\255\069\000\230\255\233\255\220\255\235\255\103\000\
    \231\255\082\000\229\255\234\255\221\255\152\000\252\255\253\255\
    \005\000\254\255\104\000\255\255\161\000\251\255\252\255\070\001\
    \255\255\253\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \028\000\255\255\255\255\038\000\019\000\032\000\255\255\016\000\
    \255\255\014\000\255\255\255\255\255\255\255\255\009\000\255\255\
    \008\000\004\000\255\255\002\000\001\000\000\000\255\255\255\255\
    \005\000\255\255\255\255\255\255\255\255\255\255\255\255\018\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\003\000\255\255\255\255\255\255\255\255\004\000\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\000\000\000\000\000\000\046\000\000\000\000\000\
    \255\255\000\000\255\255\000\000\053\000\000\000\000\000\057\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\030\000\030\000\028\000\029\000\028\000\049\000\
    \000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \028\000\014\000\026\000\003\000\000\000\028\000\011\000\043\000\
    \024\000\022\000\007\000\009\000\023\000\008\000\010\000\006\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\015\000\016\000\013\000\012\000\004\000\044\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\021\000\041\000\020\000\005\000\039\000\
    \038\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\019\000\017\000\018\000\037\000\036\000\
    \034\000\033\000\031\000\035\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\027\000\040\000\
    \042\000\051\000\000\000\000\000\000\000\000\000\000\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\000\000\049\000\000\000\000\000\048\000\000\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\050\000\056\000\000\000\000\000\027\000\000\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\000\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\000\000\
    \058\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\054\000\058\000\000\000\000\000\000\000\000\000\000\000\
    \058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\058\000\000\000\000\000\000\000\
    \058\000\000\000\058\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\029\000\000\000\000\000\028\000\048\000\
    \255\255\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\028\000\000\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\012\000\000\000\000\000\013\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\015\000\017\000\
    \022\000\024\000\025\000\034\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\027\000\039\000\
    \041\000\050\000\255\255\255\255\255\255\255\255\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\255\255\045\000\255\255\255\255\045\000\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\045\000\052\000\255\255\255\255\027\000\255\255\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\052\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\255\255\
    \055\000\255\255\255\255\255\255\255\255\055\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \045\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\052\000\055\000\255\255\255\255\255\255\255\255\255\255\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\055\000\255\255\255\255\255\255\
    \055\000\255\255\055\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\055\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 112 "lexer.mll"
     ( next_line lexbuf; token lexbuf )
# 263 "lexer.ml"

  | 1 ->
# 114 "lexer.mll"
     ( token lexbuf )
# 268 "lexer.ml"

  | 2 ->
# 116 "lexer.mll"
     ( let s = Lexing.lexeme lexbuf in
	 try
	   Hashtbl.find keyword_table s
         with Not_found ->
	   if (not (!accept_arobase)) && (String.contains s '@') then
	     raise IllegalCharacter;
           IDENT (s, extent lexbuf)
     )
# 280 "lexer.ml"

  | 3 ->
# 125 "lexer.mll"
    ( 
      clear_buffer ();
      string lexbuf;
      STRING (get_string (),extent lexbuf) )
# 288 "lexer.ml"

  | 4 ->
# 131 "lexer.mll"
    ( 
      try 
        INT (int_of_string(Lexing.lexeme lexbuf))
      with Failure _ ->
	input_error "Incorrect integer" (extent lexbuf)
    )
# 298 "lexer.ml"

  | 5 ->
# 138 "lexer.mll"
     ( FLOAT (float_of_string(Lexing.lexeme lexbuf)) )
# 303 "lexer.ml"

  | 6 ->
# 139 "lexer.mll"
       (
         comment lexbuf;
         token lexbuf
       )
# 311 "lexer.ml"

  | 7 ->
# 143 "lexer.mll"
      ( COMMA )
# 316 "lexer.ml"

  | 8 ->
# 144 "lexer.mll"
      ( LPAREN )
# 321 "lexer.ml"

  | 9 ->
# 145 "lexer.mll"
      ( RPAREN )
# 326 "lexer.ml"

  | 10 ->
# 146 "lexer.mll"
      ( LBRACKET )
# 331 "lexer.ml"

  | 11 ->
# 147 "lexer.mll"
      ( RBRACKET )
# 336 "lexer.ml"

  | 12 ->
# 148 "lexer.mll"
      ( LBRACE )
# 341 "lexer.ml"

  | 13 ->
# 149 "lexer.mll"
      ( RBRACE )
# 346 "lexer.ml"

  | 14 ->
# 150 "lexer.mll"
      ( BAR )
# 351 "lexer.ml"

  | 15 ->
# 151 "lexer.mll"
      ( SEMI )
# 356 "lexer.ml"

  | 16 ->
# 152 "lexer.mll"
      ( COLON )
# 361 "lexer.ml"

  | 17 ->
# 153 "lexer.mll"
      ( REPL )
# 366 "lexer.ml"

  | 18 ->
# 154 "lexer.mll"
       ( LEQ )
# 371 "lexer.ml"

  | 19 ->
# 155 "lexer.mll"
      ( EQUAL )
# 376 "lexer.ml"

  | 20 ->
# 156 "lexer.mll"
       ( DIFF )
# 381 "lexer.ml"

  | 21 ->
# 157 "lexer.mll"
       ( AND )
# 386 "lexer.ml"

  | 22 ->
# 158 "lexer.mll"
       ( OR )
# 391 "lexer.ml"

  | 23 ->
# 159 "lexer.mll"
      ( DOT )
# 396 "lexer.ml"

  | 24 ->
# 160 "lexer.mll"
        ( EQUIVLEFT )
# 401 "lexer.ml"

  | 25 ->
# 161 "lexer.mll"
        ( EQUIVRIGHT )
# 406 "lexer.ml"

  | 26 ->
# 162 "lexer.mll"
        ( IMPLIES )
# 411 "lexer.ml"

  | 27 ->
# 163 "lexer.mll"
      ( ADD )
# 416 "lexer.ml"

  | 28 ->
# 164 "lexer.mll"
      ( SUB )
# 421 "lexer.ml"

  | 29 ->
# 165 "lexer.mll"
      ( MUL )
# 426 "lexer.ml"

  | 30 ->
# 166 "lexer.mll"
      ( DIV )
# 431 "lexer.ml"

  | 31 ->
# 167 "lexer.mll"
      ( POWER )
# 436 "lexer.ml"

  | 32 ->
# 168 "lexer.mll"
      ( READ )
# 441 "lexer.ml"

  | 33 ->
# 169 "lexer.mll"
      ( WRITE )
# 446 "lexer.ml"

  | 34 ->
# 170 "lexer.mll"
       ( MAPSTO )
# 451 "lexer.ml"

  | 35 ->
# 171 "lexer.mll"
       ( DEF )
# 456 "lexer.ml"

  | 36 ->
# 172 "lexer.mll"
      ( COUNT )
# 461 "lexer.ml"

  | 37 ->
# 173 "lexer.mll"
      ( EOF )
# 466 "lexer.ml"

  | 38 ->
# 174 "lexer.mll"
    ( raise IllegalCharacter )
# 471 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 45
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 177 "lexer.mll"
       ( )
# 483 "lexer.ml"

  | 1 ->
# 179 "lexer.mll"
     ( next_line lexbuf; comment lexbuf )
# 488 "lexer.ml"

  | 2 ->
# 180 "lexer.mll"
      ( )
# 493 "lexer.ml"

  | 3 ->
# 181 "lexer.mll"
    ( comment lexbuf )
# 498 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 52
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 184 "lexer.mll"
       ( () )
# 510 "lexer.ml"

  | 1 ->
# 186 "lexer.mll"
      ( 
        add_char (char_backslash (Lexing.lexeme_char lexbuf 1));
        string lexbuf
      )
# 518 "lexer.ml"

  | 2 ->
# 191 "lexer.mll"
      ( raise IllegalEscape )
# 523 "lexer.ml"

  | 3 ->
# 193 "lexer.mll"
      ( raise UnterminatedString )
# 528 "lexer.ml"

  | 4 ->
# 195 "lexer.mll"
      ( 
        add_char (Lexing.lexeme_char lexbuf 0);
        string lexbuf 
      )
# 536 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

