(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and David Cadé                       *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2014           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributors: Bruno Blanchet, Bruno.Blanchet@inria.fr
                  David Cadé

This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(*

WooLam shared-key auth protocol (1992, computer)
Corrections of Gordon, Jeffrey CSFW'01

A -> B : A
B -> A : N (fresh)
A -> B : { m3, B, N }_kAS
B -> S : A,B,{ m3, B, N }_kAS
S -> B : { m5, A, N }_kBS
B: verify { m5, A, N }_kBS = the message from S

Correct.
*)

param N, N2, N3, Nh.

type nonce [large,fixed].
type host [bounded].
type mkey [bounded].
type mkeyseed [fixed].
type key [bounded].
type keyseed [fixed].
type seed [fixed].
type macs [bounded].
type tag [bounded].
type maxenc [bounded].
type maxmac [bounded].

table keytbl (key, mkey, host).

fun concat1(tag, host, nonce):maxenc [compos].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(keyseed, key, maxenc, maxmac, seed, kgen, enc, dec, injbot, Z, Penc).

(* The function Z returns for each bitstring, a bitstring
   of the same length, consisting only of zeroes. *)
const Zconcat1:maxenc.
forall y:tag, h:host, z:nonce; 
	Z(concat1(y,h,z)) = Zconcat1.

(* Mac *)

proba Pmac.

expand UF_CMA_mac(mkeyseed, mkey, maxmac, macs, mkgen, mac, check, Pmac).

(* We model an unbounded number of honest and dishonest participants.
   Participants honest(...) are honest, dishonest(...) are dishonest *)

type hname.
fun honest(hname):host [compos].
fun dishonest(hname):host [compos].

forall x1:hname, x2:hname; honest(x1) <> dishonest(x2).

(* Queries *)

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13,
	start, finish.

const tag3: tag.
const tag5: tag.

event beginA(host).
event beginAfull(host, host, nonce).
event endB(host, host, nonce).

query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event endB(x,y,z) ==> beginA(x).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginAfull(x,y,z).
query x:host, y:host, z:nonce;
	event inj:endB(x,y,z) ==> inj:beginA(x).

implementation type keyseed = 128;
               type mkeyseed = 160;
               table keytbl = "keytbl";
               type key = 128;
               type mkey = "string" [ serial = "id", "id" ];
	       type hname = "string";
               type host = "string" [serial = "id", "id" ];
               fun mkgen = "mac_kgen";
               fun kgen = "sym_kgen";
               type maxmac = "string";
               type macs = "string";
               type seed = 128;
	       type nonce = 64;
               fun mac = "(mac Cryptokit.MAC.hmac_sha1)";
               fun enc = "(sym_r_enc (Cryptokit.Cipher.aes ~mode:Cryptokit.Cipher.CBC ~pad:Cryptokit.Padding.length))";
               fun concat1 = "concat_str_str_str" [ inverse = "unconcat_str_str_str" ];
               const tag5 = "\"tag5\"";
               fun dec = "(sym_r_dec 16 (Cryptokit.Cipher.aes ~mode:Cryptokit.Cipher.CBC ~pad:Cryptokit.Padding.length))";
               fun injbot = "injbot" [inverse = "injbot_inv" ];
	       fun honest = "id" [inverse = "id" ];
               const tag3 = "\"tag3\"";
               fun check = "(mac_check Cryptokit.MAC.hmac_sha1)".
               

let processInit =
    WLSK_Init {
	in(c1, hostB2:host); (* Choose the responder *)
	event beginA(hostB2);
	out(c2, A);
	in(c3, n:nonce);
	event beginAfull(hostB2, A, n);
	new r1:seed;
	let e1 = enc(concat1(tag3, hostB2, n), kAS, r1) in
	out(c4, (e1, mac(e1, mkAS)))}.

let processResp =
    WLSK_Resp {
	in(c5, hostA2:host);
	new N:nonce;
	out(c6, N);
	in(c7, (m:maxmac, macm:macs));
	out(c8, (hostA2, A, m, macm));
	in(c9, (m2:maxmac, macm2:macs));
	if check(m2, mkAS, macm2) then
	if injbot(concat1(tag5, hostA2, N)) = dec(m2, kAS) then
	out(c10, ()) };
	(* OK *)
	in(c11, ());
	let honest(x) = hostA2 in
	event endB(A, hostA2, N).

let processH =
   WLSK_keygen [ kAS > wlsk_enc_key, mkAS > wlsk_mac_key, A > wlsk_id ] {
        (* Generate keys for honest participant A *)
	in(start, hostname: hname);
	let A: host = honest(hostname) in
	new rKas: keyseed;
	let kAS:key = kgen(rKas) in
	new rmKas: mkeyseed;
	let mkAS:mkey = mkgen(rmKas) in
	insert keytbl(kAS, mkAS, A);
	out(c13, ()) };
	(* Each participant can play the roles of the initiator and 
	   the responder *)
   	((! N processInit) | (! N processResp)).
    

let processK =
        (* The adversary can register keys for dishonest participants *)
	in(c10, (Khost: host, Kkey: key, Kmkey: mkey));
	let dishonest(x) = Khost in
           insert keytbl (Kkey, Kmkey, Khost).

let processS =
    WLSK_S {
	in(c11, (hostA1:host, hostB0:host, m:maxmac, macm:macs));
        get keytbl (kbs, mkbs, =hostB0) in
        get keytbl (kas, mkas, =hostA1) in
	if check(m, mkas, macm) then
	let injbot(concat1(=tag3, =hostB0, n)) = dec(m, kas) in
	new r3:seed;
	let e3 = enc(concat1(tag5, hostA1, n), kbs, r3) in
	out(c12, (e3, mac(e3, mkbs)))}.


process 
	((! Nh processH) |
	 (! N processS) |
	 (! N2 processK))
