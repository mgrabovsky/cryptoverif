(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and David Cadé                       *
 *                                                           *
 *       Copyright (C) ENS, CNRS, INRIA, 2005-2014           *
 *                                                           *
 *************************************************************)

(*

    Copyright ENS, CNRS, INRIA 
    contributors: Bruno Blanchet, Bruno.Blanchet@inria.fr
                  David Cadé

This software is a computer program whose purpose is to verify 
cryptographic protocols in the computational model.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

*)
(* Needham Schroeder public key protocol, fixed by Lowe.
   In this example, the host name is concatenated with the role (A or B)
   to create the identity. Hence we use different keys for each role,
   even if several roles are run on the same machine.
 *)

(* In order to determine the proof, use interactive mode: 
   set interactiveMode = true.
The proof is as follows: *)

proof {
show_game;
crypto uf_cma(sign_r) k_232;
auto
}

param N.
param N2.
param N3.
param N4.

type nonce [fixed,large].
type host [bounded].
type pkey [bounded].
type skey [bounded].
type keyseed [large,fixed].
type seed [fixed].
type spkey [bounded].
type sskey [bounded].
type skeyseed [large,fixed].
type sseed [fixed].
type signature [bounded].
type blocksize [fixed].
type blocksizebot [bounded].
type sblocksize [fixed].
type role [bounded].
type hostname [bounded].
type keypair [bounded].
type skeypair [bounded].


implementation type sseed=64;
               type skeyseed=64;
               type keyseed=64;
               type seed=64;
               type nonce=64;
               type host="string" [serial = "id", "id"];
               type pkey="pkey" [serial = "pkey_to","pkey_from"];
               type skey="skey" [serial = "skey_to","skey_from"];
               type signature="string";
               type spkey="pkey" [serial = "pkey_to","pkey_from"];
               type sskey="skey" [serial = "skey_to","skey_from"].

table keytbl(host,pkey).
implementation table keytbl="keytbl".

(* The constants hostnameA and hostnameB may be equal or different *)

set diffConstants = false.
const hostnameA: hostname.
const hostnameB: hostname.

fun concat1(nonce, host):blocksize [compos].
fun concat2(nonce, nonce, host):blocksize [compos].
fun concat3(pkey, host):sblocksize [compos].
fun concat4(hostname, role):host [compos].
fun pad(nonce):blocksize [compos].

fun kp(pkey,skey):keypair [compos].
fun skp(spkey,sskey):skeypair [compos].

forall z:nonce,t:nonce,u:host,y2:nonce,z2:host;
	concat2(z,t,u) <> concat1(y2,z2).
forall y:nonce,y2:nonce,z2:host;
	pad(y) <> concat1(y2,z2).
forall z:nonce,t:nonce,u:host,y2:nonce;
	concat2(z,t,u) <> pad(y2).

(* Public-key encryption (IND-CCA2) *)

proba Penc.
proba Penccoll.

expand IND_CCA2_public_key_enc(keyseed, pkey, skey, blocksize, bitstring, seed, skgen, pkgen, enc_r, dec, injbot, Z, Penc, Penccoll).

(* Signatures *)

proba Psign.
proba Psigncoll.

expand UF_CMA_signature(skeyseed, spkey, sskey, sblocksize, signature, sseed, sskgen, spkgen, sign_r, check, Psign, Psigncoll).

(* Queries *)

event beginA(host, host, nonce, nonce).
event endA(host, host, nonce, nonce).
event beginB(host, host, nonce, nonce).
event endB(host, host, nonce, nonce).

query x:host, y:host, na:nonce, nb:nonce;
	event endA(x,y,na,nb) ==> beginB(x,y,na,nb).
query x:host, y:host, na:nonce, nb:nonce;
	event endB(x,y,na,nb) ==> beginA(x,y,na,nb).
query x:host, y:host, na:nonce, nb:nonce;
	event inj:endA(x,y,na,nb) ==> inj:beginB(x,y,na,nb).
query x:host, y:host, na:nonce, nb:nonce;
	event inj:endB(x,y,na,nb) ==> inj:beginA(x,y,na,nb).

const roleA:role.
const roleB:role.
forall ; roleA <> roleB.

(*implementation*)

letfun kgen() =  k <-R keyseed;  kp (pkgen(k) ,skgen(k) ).
letfun kgen_s() =  k <-R skeyseed;  skp (spkgen(k) ,sskgen(k) ).

letfun enc(msg: blocksize, k: pkey) = r <-R seed; enc_r(msg, k, r).
letfun sign(msg: sblocksize, k: sskey) = r <-R sseed; sign_r(msg, k, r).

implementation fun concat1="concat_str_str" [inverse = "unconcat_str_str"];
               fun concat2="concat_str_str_str" [inverse =  "unconcat_str_str_str"];
               fun concat3="concat_pk_str" [inverse =  "unconcat_pk_str"];
               fun concat4="concat_str_str" [inverse =  "unconcat_str_str"];
	       fun kgen = "(pk_kgen 1024)";
	       fun kgen_s = "(pk_kgen 1024)";
               fun sign="(rsassa_pss_sign 8)";
               fun hostnameA="get_hostname";
               fun hostnameB="get_hostname";
               fun check="(rsassa_pss_verify 8)";
               fun enc="pk_enc";
               fun dec="pk_dec";
               fun injbot="injbot" [inverse =  "injbot_inv"];
               fun pad="(pad Cryptokit.Padding.length 64)" [inverse = "(pad_inv Cryptokit.Padding.length)"];
               fun kp="id" [inverse="id"];
               fun skp="id" [inverse="id"];
               const roleA="\"A\"";
               const roleB="\"B\"".



let processA =
(* Key generation for A *)
ONS_AGenKey [ pkA > pkA, skA > skA, A > idA ] 
{
    OAGK () :=
        A:host <- concat4 (hostnameA,roleA);
        let kp (pkA:pkey,skA:skey) = kgen() in
        insert keytbl(A,pkA);
        return (pkA)};
foreach i <= N do
(* Role of A *)
ONS_A {
    OA1 (hostX: host) := (* hostX is A's interlocutor *)
        return (A, hostX);
    OA3 (pkX: pkey, =hostX, ms: signature) :=
	if check(concat3(pkX, hostX), pkS, ms) then
	(* Message 3 *)
        Na <-R nonce;
        return (enc(concat1(Na, A), pkX));
	(* Message 6 *)
    OA5 (m: bitstring) :=
	let injbot(concat2(=Na, Nb, =hostX)) = dec(m, skA) in
	event beginA(A, hostX, Na, Nb);
	(* Message 7 *)
	return (enc(pad(Nb), pkX))};
	(* OK *)
    OAFinish () := (*need to define B before using it*)
	if defined(B) && (hostX = B) then
	event endA(A, hostX, Na, Nb).

let processB =
(* Key generation for B *)
ONS_BGenKey [ pkB > pkB, skB > skB, B > idB] 
{
    OBGK () :=
        B:host <- concat4 (hostnameB,roleB);
        let kp (pkB:pkey,skB:skey) = kgen() in
        insert keytbl(B,pkB);
        return (pkB)};
foreach i <= N do
(* Role of B *)
ONS_B {
	(* Message 3 *)
    OB7 (m:bitstring) :=
	let injbot(concat1(Na, hostY)) = dec(m, skB) in
	return (B, hostY);
    OB9 (pkY: pkey, =hostY, ms: signature) :=
	if check(concat3(pkY, hostY), pkS, ms) then
	(* Message 6 *)
	Nb <-R nonce;
	event beginB(hostY, B, Na, Nb);
	return (enc(concat2(Na, Nb, B), pkY));
	(* Message 7 *)
    OB11 (m3: bitstring) :=
	let injbot(pad(=Nb)) = dec(m3, skB) in
        return ()};
    OBFinish () :=
              	(* OK *)
	if  defined (A) && (hostY = A) then
	event endB(hostY, B, Na, Nb).

let processK =
    OK12 (Khost: host, Kkey: pkey) :=
           if defined (A,B,pkA,pkB) && (Khost <> A) && (Khost <> B) then 
                 insert keytbl(Khost,Kkey).

let processS =
(* The certificate server. It receives a pair of host names (h1,h2)
   and returns a certificate for h2. h1 is expected to be the host that
   asks for the certificate. *) 
ONS_S {  
    OS13 (h1: host, h2: host) :=
	get keytbl (Khost,Rkey) suchthat Khost=h2 in
	return (Rkey, h2, sign(concat3(Rkey, h2), skS))}.

process 
(* This module generates keys for the certificate server *)
ONS_Keygen [pkS > pkS, skS > skS ] {
    OStart() :=
        let skp (pkS:spkey,skS:sskey) = kgen_s () in
	return (pkS)};
	(processA |
	 processB | 
         (foreach i <= N do processS) |
	 (foreach i <= N2 do processK))

